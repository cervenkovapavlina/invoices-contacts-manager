from django.core.exceptions import ValidationError
from django.test import TestCase
from .models import NumberRowPrefix, NumberRowValue, Invoice, InvoiceItem
from django.utils import timezone
from datetime import datetime


class NumberRowTest(TestCase):
    """
    Regular user can create a new number row.
        A shared prefix is either generated or specified by the creator.
        Actual numbers/values are generated by the system.
        Generated values are consistent, without "missing values" in the row.
    Regular user can display a list of number rows.
    Regular user can display a detail page of a number row.
    """

    def tearDown(self):
        pass

    def test_default_values(self):
        number_row_prefix = NumberRowPrefix()
        number_row_prefix.save()
        self.assertGreater(number_row_prefix.id, 0, "number_row_prefix.id > 0")
        self.assertEqual(number_row_prefix.prefix, "", "number_row_prefix.prefix = \"\" ")
        self.assertEqual(number_row_prefix.year, self.get_current_year(),
                         "number_row.prefix.year = self.get_current_year()")
        number_row_value = NumberRowValue(prefix=number_row_prefix)
        number_row_value.save()
        self.assertGreater(number_row_value.id, 0, "number_row_value.id > 0")
        self.assertEqual(number_row_value.value, 1, "number_row_value.value = 1")

    def test_two_number_rows_with_identical_prefix(self):
        prefix = "I"
        first_number_row_prefix = NumberRowPrefix(prefix=prefix)
        first_number_row_prefix.save()
        unique_exception = False
        try:
            second_number_row_prefix = NumberRowPrefix(prefix=prefix)
            second_number_row_prefix.save()
        except ValidationError as e:
            self.assertEqual("Final prefix already exists.", e.message, "Final prefix already exists. = e.message")
            unique_exception = True
        self.assertTrue(unique_exception, "unique_exception = True")

    def test_multiple_number_row_values_with_different_prefixes(self):
        # Zalozime dva prefixy
        issued_invoice_prefix = NumberRowPrefix(prefix="I")
        issued_invoice_prefix.save()
        received_invoice_prefix = NumberRowPrefix(prefix="R")
        received_invoice_prefix.save()
        self.assertEqual(issued_invoice_prefix.get_final_prefix(), f"I{self.get_current_year()}",
                         "issued_invoice_prefix.get_final_prefix() = f\"I{self.get_current_year()}\"")
        self.assertEqual(received_invoice_prefix.get_final_prefix(), f"R{self.get_current_year()}",
                         "received_invoice_prefix.get_final_prefix() = f\"R{self.get_current_year()}\"")
        # Pro prvni prefix zalozime dve values
        first_issued_invoice_value = NumberRowValue(prefix=issued_invoice_prefix)
        first_issued_invoice_value.save()
        second_issued_invoice_value = NumberRowValue(prefix=issued_invoice_prefix)
        second_issued_invoice_value.save()
        # Pro druhy prefix zalozime dve values
        first_received_invoice_value = NumberRowValue(prefix=received_invoice_prefix)
        first_received_invoice_value.save()
        second_received_invoice_value = NumberRowValue(prefix=received_invoice_prefix)
        second_received_invoice_value.save()
        self.assertEqual(first_issued_invoice_value.value, 1, "first_issued_invoice_value.value = 1")
        self.assertEqual(second_issued_invoice_value.value, 2, "second_issued_invoice_value.value = 2")
        self.assertEqual(first_received_invoice_value.value, 1, "first_received_invoice_value.value = 1")
        self.assertEqual(second_received_invoice_value.value, 2, "second_received_invoice_value.value = 2")

    def test_final_number_row_values(self):
        # Zalozime dva prefixy, jeden s defaultem, jeden zadany
        default_prefix = NumberRowPrefix()
        default_prefix.save()
        given_prefix = NumberRowPrefix(prefix="I")
        given_prefix.save()
        # Pro kazdy prefix vytvorime cyklem 10 number row values
        for i in range(1, 11):
            number_row_value = NumberRowValue(prefix=default_prefix)
            number_row_value.save()
        for i in range(1, 11):
            number_row_value = NumberRowValue(prefix=given_prefix)
            number_row_value.save()
        # Kontrola finalni hodnoty pro prvni a desatou value pro defaultni prefix
        first_value_with_default_prefix = NumberRowValue.objects.filter(prefix=default_prefix, value=1)[0]
        tenth_value_with_default_prefix = NumberRowValue.objects.filter(prefix=default_prefix, value=10)[0]
        self.assertEqual(first_value_with_default_prefix.get_final_value(), f"{self.get_current_year()}0001",
                         "first_value_with_default_prefix.get_final_value() = f\"{self.get_current_year()}0001\"")
        self.assertEqual(tenth_value_with_default_prefix.get_final_value(), f"{self.get_current_year()}0010",
                         "tenth_value_with_default_prefix.get_final_value() = f\"{self.get_current_year()}0010\"")
        # Kontrola finalni hodnoty pro prvni a desatou value pro zadany prefix
        first_value_with_given_prefix = NumberRowValue.objects.filter(prefix=given_prefix, value=1)[0]
        tenth_value_with_given_prefix = NumberRowValue.objects.filter(prefix=given_prefix, value=10)[0]
        self.assertEqual(first_value_with_given_prefix.get_final_value(),
                         f"{given_prefix.prefix}{self.get_current_year()}0001",
                         "first_value_with_given_prefix.get_final_value() = f\"{given_prefix.prefix}{self.get_current_year()}0001\"")
        self.assertEqual(tenth_value_with_given_prefix.get_final_value(),
                         f"{given_prefix.prefix}{self.get_current_year()}0010",
                         "tenth_value_with_given_prefix.get_final_value() = f\"{given_prefix.prefix}{self.get_current_year()}0010\"")

    def get_current_year(self):
        return str(datetime.now().year)


class InvoiceItemTest(TestCase):

    def test_default_values_when_only_required_fields_set(self):
        invoice = Invoice()
        invoice.save()
        invoice_item = InvoiceItem(name="Web Hosting", unit_price=120000, invoice=invoice)
        invoice_item.save()
        self.assertGreater(invoice_item.id, 0, "invoice_item.id > 0")
        self.assertEqual(invoice_item.unit_count, 1, "invoice_item.unit_count = 1")

    def test_multiple_invoice_items_assigned_to_different_invoices(self):
        # Vytvorime dve faktury
        first_invoice = Invoice()
        first_invoice.save()
        second_invoice = Invoice()
        second_invoice.save()
        # Vytvorime dve polozky na prvni fakturu
        first_invoice_item = InvoiceItem(name="Web Hosting", description="Annual fee for web hosting services",
                                         unit_price=120000, unit_count=1, invoice=first_invoice)
        first_invoice_item.save()
        second_invoice_item = InvoiceItem(name="Domain .cz", unit_price=25000, invoice=first_invoice)
        second_invoice_item.save()
        # Vytvorime tri polozky na druhou fakturu
        third_invoice_item = InvoiceItem(name="Consulting", description="IT consulting â€“ 5 hours",
                                         unit_price=100000, unit_count=5, invoice=second_invoice)
        third_invoice_item.save()
        fourth_invoice_item = InvoiceItem(name="Acer laptop", unit_price=1950000, unit_count=3, invoice=second_invoice)
        fourth_invoice_item.save()
        fifth_invoice_item = InvoiceItem(name="Licensed Software", description="Annual license", unit_price=25000,
                                         invoice=second_invoice)
        fifth_invoice_item.save()
        self.assertEqual(InvoiceItem.objects.filter(invoice=first_invoice).count(), 2,
                         "InvoiceItem.objects.filter(invoice=first_invoice).count() = 2")
        self.assertEqual(InvoiceItem.objects.filter(invoice=second_invoice).count(), 3,
                         "InvoiceItem.objects.filter(invoice=second_invoice).count() = 3")
